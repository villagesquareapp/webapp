name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci


      - name: Build
        run: npm run build --if-present

      - name: Test
        run: npm test --if-present

      # Step 2: Run Unit Tests
      # - name: Run Unit Tests
      #   run: |
      #     echo "Running unit tests..."
      #     npm install
      #     npm test -- --coverage

      # # Step 3: Run SonarQube Code Analysis using npx sonar-scanner
      # - name: SonarQube Scan
      #   uses: SonarSource/sonarqube-scan-action@v5
      #   with:
      #     projectBaseDir: '.'  # Optional, sets project root
      #     args: >
      #       -Dsonar.projectKey=villagesquareapp_api-v2
      #       -Dsonar.organization=villagesquare
      #       -Dsonar.host.url=https://sonarcloud.io
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Step 4: Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::606802968668:role/GitHubOIDCRole
          role-session-name: github-actions  
          aws-region: af-south-1
          audience: sts.amazonaws.com
      # Step 5: Configure kubeconfig for EKS
      - name: Configure kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region af-south-1 --name kitops-eks --role-arn arn:aws:iam::606802968668:role/GitHubOIDCRole

      # Step 6: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region af-south-1 | docker login --username AWS --password-stdin 606802968668.dkr.ecr.af-south-1.amazonaws.com

      # Step 7: Generate Docker Image Tag
      - name: Generate Image Tag
        run: |
          IMAGE_TAG=$(date +%Y%m%d%H%M%S)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      # Step 8: Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t webapps:${{ env.IMAGE_TAG }} .
        shell: bash

      #Step 9: Trivy Security Scan on Docker Image
      # - name: Trivy Image Scan
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: 'villagesquare-server:${{ env.IMAGE_TAG }}'
      #     format: 'table'
      #     exit-code: '1'
      #     ignore-unfixed: true
      #     severity: 'CRITICAL,HIGH'

      # Step 10: Tag Docker Image for ECR
      - name: Tag Docker Image
        run: |
          docker tag webapps:${{ env.IMAGE_TAG }} 606802968668.dkr.ecr.af-south-1.amazonaws.com/webapps:${{ env.IMAGE_TAG }}

      # Step 11: Push Docker Image to ECR
      - name: Push Docker Image to ECR
        run: |
          docker push 606802968668.dkr.ecr.af-south-1.amazonaws.com/webapps:${{ env.IMAGE_TAG }}

    # Step 12: Output the ECR image URI
      - name: Output Image URI
        run: echo "Image pushed to: 606802968668.dkr.ecr.af-south-1.amazonaws.com/webapps:${{ env.IMAGE_TAG }}"

    # Step 13: Update Kubernetes deployment image
      - name: Prepare manifest credentials
        id: manifest-creds
        run: |
          if [ -n "${API_V2_REPO_TOKEN}" ]; then
            echo "token_source=API_V2_REPO_TOKEN" >> "$GITHUB_OUTPUT"
            echo "push_token=${API_V2_REPO_TOKEN}" >> "$GITHUB_OUTPUT"
          else
            echo "token_source=GITHUB_TOKEN" >> "$GITHUB_OUTPUT"
            echo "push_token=${GITHUB_TOKEN}" >> "$GITHUB_OUTPUT"
          fi
        env:
          API_V2_REPO_TOKEN: ${{ secrets.API_V2_REPO_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Announce manifest token source
        run: echo "Using ${{ steps.manifest-creds.outputs.token_source }} to update API manifests"

      - name: Clone API manifests repository
        run: |
          git clone https://x-access-token:${{ steps.manifest-creds.outputs.push_token }}@github.com/villagesquareapp/api-v2.git api-v2

      - name: Update Kubernetes manifests with new image tag
        working-directory: api-v2
        run: |
          sed -i "s|606802968668.dkr.ecr.af-south-1.amazonaws.com/webapps:.*|606802968668.dkr.ecr.af-south-1.amazonaws.com/webapps:${{ env.IMAGE_TAG }}|" kubernetes/webapp.yml

      - name: Commit and push manifest update
        working-directory: api-v2
        run: |
          if git diff --quiet; then
            echo "No manifest changes to commit."
            exit 0
          fi

          git config user.name "villagesquareltd"
          git config user.email "villagesquare130@gmail.com"
          git add kubernetes/webapp.yml
          git commit -m "Update webapp image tag to ${{ env.IMAGE_TAG }}"
          git push https://x-access-token:${{ steps.manifest-creds.outputs.push_token }}@github.com/villagesquareapp/api-v2.git HEAD:main
#     # Step 15: Apply Kubernetes deployment

      - name: Apply Kubernetes deployment
        run: |
          aws eks update-kubeconfig --region af-south-1 --name kitops-eks
          kubectl apply -f kubernetes/webapp.yml --validate=false

# name: CI

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     permissions:
#       id-token: write
#       contents: write    
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4
#         with:
#           token: ${{ secrets.GITHUB_TOKEN }}

#       - name: Set up Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: 20

#       - name: Install dependencies
#         run: npm ci


#       - name: Build
#         run: npm run build --if-present

#       - name: Test
#         run: npm test --if-present

#       # Step 2: Run Unit Tests
#       # - name: Run Unit Tests
#       #   run: |
#       #     echo "Running unit tests..."
#       #     npm install
#       #     npm test -- --coverage

#       # # Step 3: Run SonarQube Code Analysis using npx sonar-scanner
#       # - name: SonarQube Scan
#       #   uses: SonarSource/sonarqube-scan-action@v5
#       #   with:
#       #     projectBaseDir: '.'  # Optional, sets project root
#       #     args: >
#       #       -Dsonar.projectKey=villagesquareapp_api-v2
#       #       -Dsonar.organization=villagesquare
#       #       -Dsonar.host.url=https://sonarcloud.io
#       #   env:
#       #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

#       # Step 4: Configure AWS credentials
#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v3
#         with:
#           role-to-assume: arn:aws:iam::606802968668:role/GitHubOIDCRole
#           role-session-name: github-actions  
#           aws-region: af-south-1
#           audience: sts.amazonaws.com
#       # Step 5: Configure kubeconfig for EKS
#       - name: Configure kubeconfig for EKS
#         run: |
#           aws eks update-kubeconfig --region af-south-1 --name kitops-eks --role-arn arn:aws:iam::606802968668:role/GitHubOIDCRole

#       # Step 6: Log in to Amazon ECR
#       - name: Log in to Amazon ECR
#         id: login-ecr
#         run: |
#           aws ecr get-login-password --region af-south-1 | docker login --username AWS --password-stdin 606802968668.dkr.ecr.af-south-1.amazonaws.com

#       # Step 7: Generate Docker Image Tag
#       - name: Generate Image Tag
#         run: |
#           IMAGE_TAG=$(date +%Y%m%d%H%M%S)
#           echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

#       # Step 8: Build Docker Image
#       - name: Build Docker Image
#         run: |
#           docker build -t webapps:${{ env.IMAGE_TAG }} .
#         shell: bash

#       #Step 9: Trivy Security Scan on Docker Image
#       # - name: Trivy Image Scan
#       #   uses: aquasecurity/trivy-action@master
#       #   with:
#       #     image-ref: 'villagesquare-server:${{ env.IMAGE_TAG }}'
#       #     format: 'table'
#       #     exit-code: '1'
#       #     ignore-unfixed: true
#       #     severity: 'CRITICAL,HIGH'

#       # Step 10: Tag Docker Image for ECR
#       - name: Tag Docker Image
#         run: |
#           docker tag webapps:${{ env.IMAGE_TAG }} 606802968668.dkr.ecr.af-south-1.amazonaws.com/webapps:${{ env.IMAGE_TAG }}

#       # Step 11: Push Docker Image to ECR
#       - name: Push Docker Image to ECR
#         run: |
#           docker push 606802968668.dkr.ecr.af-south-1.amazonaws.com/webapps:${{ env.IMAGE_TAG }}

#     # Step 12: Output the ECR image URI
#       - name: Output Image URI
#         run: |
#             echo "Image pushed to: 606802968668.dkr.ecr.af-south-1.amazonaws.com/webapps:${{ env.IMAGE_TAG }}"

#       - name: Checkout API manifests repository
#         uses: actions/checkout@v4
#         with:
#           repository: villagesquareapp/api-v2
#           token: ${{ secrets.GITHUB_TOKEN }}
#           path: api-v2
    
#       - name: Update Kubernetes manifests with new image tag
#         working-directory: api-v2
#         run: |
#           sed -i "s|606802968668.dkr.ecr.af-south-1.amazonaws.com/webapps:.*|606802968668.dkr.ecr.af-south-1.amazonaws.com/webapps:${{ env.IMAGE_TAG }}|" kubernetes/webapp.yml
    
#       - name: Commit and push manifest update
#         working-directory: api-v2
#         run: |
#           if git diff --quiet; then
#             echo "No manifest changes to commit."
#             exit 0
#           fi
    
#           git config user.name "villagesquareltd"
#           git config user.email "villagesquare130@gmail.com"
#           git commit -am "Update webapp image tag to ${{ env.IMAGE_TAG }}"
#           git push
#     #     # Step 15: Apply Kubernetes deployment
#       - name: Apply Kubernetes deployment
#         run: |
#           aws eks update-kubeconfig --region af-south-1 --name kitops-eks
#           kubectl apply -f kubernetes/webapp.yml --validate=false
